name: Release Pipeline

on:
  push:
    branches:
      - main
  # TODO: To be deleted
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.16.0'
    - name: Install pNPM
      run: npm install -g pnpm
    - name: Install Dependencies
      run: pnpm install
    - name: Fetch Main Branch
      run: git fetch origin main
    # If system will detect no packages to be updated.
    # Pipeline will fail.
    # Build & Publish will not proceed.
    - name: Check Changeset Status
      run: npx changeset status
    # TODO: To be deleted
    - name: Build UI only
      run: pnpm ui:build:prod 
    # TODO: Replace Build All
    # Update Version of Packages based on Configured Changeset Version
    # - name: Changeset Version
    #   run: npx changeset version
    # - name: Commit Changeset
    #   uses: stefanzweifel/git-auto-commit-action@v4
    #   with:
    #     commit_message: "Update: Automated Package Version Update"
    #     commit_options: "--no-gpg-sign"
    #     commit_files: "./.changeset/**/*.md"
    # Build Only the Packages that has changes detected or has its version updated.
    # - name: NX Build Affected Packages
    #   run: pnpm affected:build
    # Upload dist directory to be reused by publish job.
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist
  publish:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
    # Download dist directory generated from build job.
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Install pNPM
      run: npm install -g pnpm
    - name: LOG pNPM Version
      run: pnpm --version
    - name: Publish packages
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      # TODO: (cd "$dir" && pnpm publish --access public)
      run: |
        cd dist/packages
        for dir in */; do
          (cd "$dir" && cat package.json)
        done

